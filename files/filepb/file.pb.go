// Code generated by protoc-gen-go. DO NOT EDIT.
// source: files/filepb/file.proto

/*
Package filepb is a generated protocol buffer package.

It is generated from these files:
	files/filepb/file.proto

It has these top-level messages:
	File
	FileRequest
	FileResponse
*/
package filepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type File struct {
	Filename string `protobuf:"bytes,1,opt,name=Filename" json:"Filename,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *File) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type FileRequest struct {
	Directory string  `protobuf:"bytes,1,opt,name=directory" json:"directory,omitempty"`
	Files     []*File `protobuf:"bytes,2,rep,name=files" json:"files,omitempty"`
}

func (m *FileRequest) Reset()                    { *m = FileRequest{} }
func (m *FileRequest) String() string            { return proto.CompactTextString(m) }
func (*FileRequest) ProtoMessage()               {}
func (*FileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FileRequest) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

func (m *FileRequest) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

type FileResponse struct {
}

func (m *FileResponse) Reset()                    { *m = FileResponse{} }
func (m *FileResponse) String() string            { return proto.CompactTextString(m) }
func (*FileResponse) ProtoMessage()               {}
func (*FileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*File)(nil), "filepb.File")
	proto.RegisterType((*FileRequest)(nil), "filepb.FileRequest")
	proto.RegisterType((*FileResponse)(nil), "filepb.FileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FileService service

type FileServiceClient interface {
	Sync(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
}

type fileServiceClient struct {
	cc *grpc.ClientConn
}

func NewFileServiceClient(cc *grpc.ClientConn) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) Sync(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := grpc.Invoke(ctx, "/filepb.FileService/Sync", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileService service

type FileServiceServer interface {
	Sync(context.Context, *FileRequest) (*FileResponse, error)
}

func RegisterFileServiceServer(s *grpc.Server, srv FileServiceServer) {
	s.RegisterService(&_FileService_serviceDesc, srv)
}

func _FileService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filepb.FileService/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Sync(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "filepb.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _FileService_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "files/filepb/file.proto",
}

func init() { proto.RegisterFile("files/filepb/file.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0xcb, 0xcc, 0x49,
	0x2d, 0xd6, 0x07, 0x91, 0x05, 0x49, 0x60, 0x4a, 0xaf, 0xa0, 0x28, 0xbf, 0x24, 0x5f, 0x88, 0x0d,
	0x22, 0xa4, 0xa4, 0xc4, 0xc5, 0xe2, 0x96, 0x99, 0x93, 0x2a, 0x24, 0xc5, 0xc5, 0x01, 0xa2, 0xf3,
	0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x25, 0x7f, 0x2e, 0x6e,
	0x10, 0x3b, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x86, 0x8b, 0x33, 0x25, 0xb3, 0x28,
	0x35, 0xb9, 0x24, 0xbf, 0xa8, 0x12, 0xaa, 0x16, 0x21, 0x20, 0xa4, 0xc4, 0xc5, 0x0a, 0xb6, 0x53,
	0x82, 0x49, 0x81, 0x59, 0x83, 0xdb, 0x88, 0x47, 0x0f, 0x62, 0x91, 0x1e, 0xd8, 0x04, 0x88, 0x94,
	0x12, 0x1f, 0x17, 0x0f, 0xc4, 0xc0, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x23, 0x27, 0x88, 0x05,
	0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0xc6, 0x5c, 0x2c, 0xc1, 0x95, 0x79, 0xc9, 0x42,
	0xc2, 0x28, 0x7a, 0x21, 0xb6, 0x4b, 0x89, 0xa0, 0x0a, 0x42, 0x4c, 0x50, 0x62, 0x48, 0x62, 0x03,
	0xfb, 0xcb, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x34, 0x44, 0xb6, 0xd5, 0xf2, 0x00, 0x00, 0x00,
}
